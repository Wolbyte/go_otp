{
    "swagger": "2.0",
    "info": {
        "description": "A simple OTP implementation written in go",
        "title": "GO OTP",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/profile/info": {
            "get": {
                "description": "Returns a user's id with a message using a JWT token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get private user data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetProfileResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.HTTPError"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Returns a list of users with pagination and filtering capabilities",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get a list of users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Sets the current page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Elements per page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search for user(s) with phone number",
                        "name": "phone_number",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "2025-09-05",
                        "description": "Set the starting registration date (yyyy-mm-dd)",
                        "name": "date_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "2025-09-06",
                        "description": "Set the ending registration date (yyyy-mm-dd)",
                        "name": "date_to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "Asia/Tehran",
                        "description": "Parse dates in the desired timezone",
                        "name": "tz",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetUsersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/oauth": {
            "post": {
                "description": "Register/Login using phone number and receive an OTP.\n\nFlow:\n1. Send a phone number in the request body\n2. Receive an OTP in the console\n3. Validate the OTP to register the user or login if it already exists (A JWT token will be given in both cases)\n\nRestrictions:\n* Phone number must be unique (for registration)\n* OTP is valid for 2 minutes\n* You can make 3 requests every 10 minutes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "OTP based Register \u0026 Login",
                "parameters": [
                    {
                        "description": "Request data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.OAuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.OAuthResponse"
                        }
                    },
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.HTTPError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/utils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Returns a single user by using it's id as a path argument",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the user",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.GetProfileResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "private data!"
                },
                "user_id": {
                    "type": "integer",
                    "example": 142
                }
            }
        },
        "handlers.GetUsersResponse": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "page_count": {
                    "type": "integer",
                    "example": 50
                },
                "page_size": {
                    "type": "integer",
                    "example": 10
                },
                "result_count": {
                    "type": "integer",
                    "example": 30
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        },
        "handlers.OAuthRequest": {
            "type": "object",
            "required": [
                "phone_number"
            ],
            "properties": {
                "otp": {
                    "type": "string",
                    "maxLength": 4,
                    "example": ""
                },
                "phone_number": {
                    "type": "string",
                    "maxLength": 11,
                    "minLength": 10,
                    "example": "09012345678"
                }
            }
        },
        "handlers.OAuthResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "success!"
                },
                "token": {
                    "type": "string",
                    "example": "\u003cJWT_TOKEN\u003e"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "phone_number": {
                    "type": "string"
                },
                "registered_at": {
                    "type": "string"
                }
            }
        },
        "utils.HTTPError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "page not found"
                }
            }
        }
    }
}